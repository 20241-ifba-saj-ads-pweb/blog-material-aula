import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as e,a as o}from"./app-Bo00HXlR.js";const t={};function i(p,a){return s(),e("div",null,a[0]||(a[0]=[o(`<h1 id="relacionamentos-com-jpa" tabindex="-1"><a class="header-anchor" href="#relacionamentos-com-jpa"><span>Relacionamentos com JPA</span></a></h1><h2 id="mapeamento-objeto-relacional" tabindex="-1"><a class="header-anchor" href="#mapeamento-objeto-relacional"><span>Mapeamento Objeto-Relacional</span></a></h2><p>O Mapeamento Objeto-Relacional, ou ORM (Object-Relational Mapping), é uma técnica que visa a integração entre o paradigma de programação orientada a objetos e o modelo relacional de bancos de dados. Em sistemas de software, os objetos são frequentemente usados para representar entidades do mundo real, enquanto os bancos de dados relacionais armazenam dados em tabelas. Essa diferença de paradigmas pode criar um descompasso, conhecido como &quot;impedância&quot;, entre o modelo de objetos e o modelo relacional.</p><p>O ORM resolve esse problema ao mapear classes e objetos para tabelas e registros do banco de dados, permitindo que os desenvolvedores trabalhem com objetos e deixem que o ORM cuide da persistência desses objetos no banco de dados. Um dos principais benefícios dessa abordagem é que ela abstrai a complexidade do SQL, permitindo que os desenvolvedores interajam com os dados através de métodos e propriedades de objetos.</p><h2 id="java-persistence-api-jpa" tabindex="-1"><a class="header-anchor" href="#java-persistence-api-jpa"><span>Java Persistence API (JPA)</span></a></h2><p>O Java Persistence API (JPA) é uma especificação Java que define como realizar o mapeamento objeto-relacional em aplicações Java. Ela fornece uma maneira padronizada de interagir com bancos de dados usando classes e objetos, sem a necessidade de escrever SQL explícito. O JPA não é uma implementação em si, mas uma especificação; frameworks como Hibernate, EclipseLink e OpenJPA implementam essa especificação.</p><p>Com JPA, os desenvolvedores podem mapear classes Java para tabelas no banco de dados, definir chaves primárias, relacionamentos entre entidades, e até mesmo executar consultas usando JPQL (Java Persistence Query Language), uma linguagem de consulta similar ao SQL, mas orientada a objetos.</p><h3 id="mapeamento-de-relacionamentos-com-jpa" tabindex="-1"><a class="header-anchor" href="#mapeamento-de-relacionamentos-com-jpa"><span>Mapeamento de Relacionamentos com JPA</span></a></h3><p>Em sistemas complexos, as entidades geralmente estão relacionadas umas com as outras. JPA fornece anotações que permitem definir e gerenciar essas relações diretamente nas classes Java. Abaixo, discutiremos os principais tipos de relacionamentos:</p><h4 id="relacionamento-um-para-muitos-one-to-many" tabindex="-1"><a class="header-anchor" href="#relacionamento-um-para-muitos-one-to-many"><span>Relacionamento Um-para-Muitos (One-to-Many)</span></a></h4><p>No relacionamento um-para-muitos, uma entidade pode estar relacionada a muitas outras entidades. Por exemplo, um <code>Department</code> pode ter muitos <code>Employee</code>, mas cada <code>Funcionário</code> pertence a um único <code>Department</code>.</p><ul><li><strong>Mapeamento</strong>: <ul><li>A entidade do lado &quot;um&quot; (por exemplo, <code>Department</code>) é anotada com <code>@OneToMany</code>, e a entidade do lado &quot;muitos&quot; (por exemplo, <code>Employee</code>) é anotada com <code>@ManyToOne</code>.</li><li>No lado &quot;um&quot;, a lista de objetos relacionados é representada como um <code>List</code> ou <code>Set</code>.</li><li>No lado &quot;muitos&quot;, a relação é mantida com uma referência ao objeto do lado &quot;um&quot;.</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd19BG3oSrFpIggv51GKT1LyylFI5J9J89pWag9C83SlCJSLAfjPN6BZcbkGar-Pccgda0fb5NFLGis3oH5b6i9oXHGu4sWKadXDZMvDDTnK1IukXzIy5A3p0G00" alt="uml diagram" loading="lazy"><figcaption>Relacionamento Um-para-Muitos (One-to-Many)</figcaption></figure><ul><li><strong>Exemplo</strong>:<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;department&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToOne</span>
    <span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="relacionamento-muitos-para-um-many-to-one" tabindex="-1"><a class="header-anchor" href="#relacionamento-muitos-para-um-many-to-one"><span>Relacionamento Muitos-para-Um (Many-to-One)</span></a></h4><p>O relacionamento muitos-para-um é o inverso do relacionamento um-para-muitos. Por exemplo, muitos <code>Employee</code> podem estar associados a um único <code>Department</code>.</p><ul><li><strong>Mapeamento</strong>: <ul><li>A entidade do lado &quot;muitos&quot; (por exemplo, <code>Employee</code>) é anotada com <code>@ManyToOne</code>, referenciando a entidade do lado &quot;um&quot;.</li><li>A chave estrangeira que representa essa relação é gerada automaticamente.</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd19BG3oSrFpIggv51GKT1LyylFI5J9J89pWag9C83SlCJSLAfjPN6BZcbkGar-Pccgda0fb5NFLGis3oH5b6i9oXHGu4sWKadXDZMvDDTnK1IukXzIy5A3p0G00" alt="uml diagram" loading="lazy"><figcaption>Relacionamento Muitos-para-Um (Many-to-One)</figcaption></figure><ul><li><strong>Exemplo</strong>:<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToOne</span>
    <span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="relacionamento-muitos-para-muitos-many-to-many" tabindex="-1"><a class="header-anchor" href="#relacionamento-muitos-para-muitos-many-to-many"><span>Relacionamento Muitos-para-Muitos (Many-to-Many)</span></a></h4><p>Em um relacionamento muitos-para-muitos, várias instâncias de uma entidade podem estar relacionadas a várias instâncias de outra entidade. Por exemplo, <code>Student</code> podem se inscrever em vários <code>Courses</code>, e cada <code>Course</code> pode ter vários <code>Student</code> inscritos.</p><ul><li><strong>Mapeamento</strong>: <ul><li>Ambas as entidades são anotadas com <code>@ManyToMany</code>.</li><li>É comum criar uma tabela de junção (join table) para armazenar as associações entre as entidades, embora JPA possa gerar essa tabela automaticamente.</li><li>No mapeamento bidirecional, é importante definir um lado &quot;dono&quot; da relação usando a propriedade <code>mappedBy</code>.</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/VOwx3O0m34HxJt4Bi052IBHqJ10H2qKAGOgT2jYTJrnGKPtl5S_NYxgiPOqqHoU2IOldf3i1Q31kQK7mjKoQmrsJMza0Qpji9GjtcDyKEirJ-Oz6WyQFn_vsa7ey9cCuZ-ROpGYYdfE_1ry0" alt="uml diagram" loading="lazy"><figcaption>Relacionamento Muitos-para-Um (Many-to-One)</figcaption></figure><ul><li><strong>Exemplo</strong>:<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToMany</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">&gt;</span></span> courses<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;courses&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="mapeamento-de-enum" tabindex="-1"><a class="header-anchor" href="#mapeamento-de-enum"><span>Mapeamento de Enum</span></a></h4><p>Quando uma entidade possui um atributo que é uma enumeração, JPA permite mapear essa enum diretamente para uma coluna no banco de dados. Isso pode ser feito armazenando o nome da constante ou o valor ordinal da enum.</p><ul><li><p><strong>Mapeamento</strong>:</p><ul><li>Usar a anotação <code>@Enumerated</code> para definir como o enum será mapeado (como <code>STRING</code> ou <code>ORDINAL</code>).</li></ul></li><li><p><strong>Exemplo</strong>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Status</span> <span class="token punctuation">{</span>
    <span class="token constant">TODO</span><span class="token punctuation">,</span>
    <span class="token constant">IN_PROGRESS</span><span class="token punctuation">,</span>
    <span class="token constant">DONE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Enumerated</span><span class="token punctuation">(</span><span class="token class-name">EnumType</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Status</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,27)]))}const d=n(t,[["render",i],["__file","13_mapeamentos_JPA.html.vue"]]),r=JSON.parse('{"path":"/posts/13_mapeamentos_JPA.html","title":"Relacionamentos com JPA","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-09-03T23:40:00.000Z","category":["aula"],"tag":["persistencia"],"order":13,"description":"Relacionamentos com JPA Mapeamento Objeto-Relacional O Mapeamento Objeto-Relacional, ou ORM (Object-Relational Mapping), é uma técnica que visa a integração entre o paradigma de...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-pweb.github.io/blog-material-aula/blog-material-aula/posts/13_mapeamentos_JPA.html"}],["meta",{"property":"og:site_name","content":"20241 PWEB Blog das Aulas"}],["meta",{"property":"og:title","content":"Relacionamentos com JPA"}],["meta",{"property":"og:description","content":"Relacionamentos com JPA Mapeamento Objeto-Relacional O Mapeamento Objeto-Relacional, ou ORM (Object-Relational Mapping), é uma técnica que visa a integração entre o paradigma de..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-03T20:19:01.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"persistencia"}],["meta",{"property":"article:published_time","content":"2024-09-03T23:40:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-03T20:19:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Relacionamentos com JPA\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-03T23:40:00.000Z\\",\\"dateModified\\":\\"2024-09-03T20:19:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Mapeamento Objeto-Relacional","slug":"mapeamento-objeto-relacional","link":"#mapeamento-objeto-relacional","children":[]},{"level":2,"title":"Java Persistence API (JPA)","slug":"java-persistence-api-jpa","link":"#java-persistence-api-jpa","children":[{"level":3,"title":"Mapeamento de Relacionamentos com JPA","slug":"mapeamento-de-relacionamentos-com-jpa","link":"#mapeamento-de-relacionamentos-com-jpa","children":[]}]}],"git":{"createdTime":1725394741000,"updatedTime":1725394741000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":2.82,"words":846},"filePathRelative":"posts/13_mapeamentos_JPA.md","localizedDate":"3 de setembro de 2024","autoDesc":true}');export{d as comp,r as data};
