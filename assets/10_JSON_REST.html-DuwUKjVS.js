import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as l,a as r,b as n,d as s,e}from"./app-LCtdcEzQ.js";const c={},u={href:"https://classroom.github.com/a/6CFmY5WW",target:"_blank",rel:"noopener noreferrer"},d={class:"footnotes"},m={class:"footnotes-list"},k={id:"footnote1",class:"footnote-item"},g={href:"https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm",target:"_blank",rel:"noopener noreferrer"},v={id:"footnote2",class:"footnote-item"},f={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"};function h(b,a){const t=p("ExternalLinkIcon");return i(),l("div",null,[a[10]||(a[10]=r(`<h1 id="rest-e-json" tabindex="-1"><a class="header-anchor" href="#rest-e-json"><span>REST e JSON</span></a></h1><h2 id="surgimento-da-api-rest" tabindex="-1"><a class="header-anchor" href="#surgimento-da-api-rest"><span>Surgimento da API REST</span></a></h2><p>A API REST (<em>Representational State Transfer</em>) foi introduzida por Roy Fielding em sua tese de doutorado em 2000 <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>. Fielding, um dos principais autores do protocolo HTTP, buscava uma maneira eficiente e escalável de comunicação entre sistemas na web. A REST se baseia em princípios arquiteturais que permitem a interação entre componentes distribuídos de forma simples e padronizada.</p><h3 id="principios-fundamentais" tabindex="-1"><a class="header-anchor" href="#principios-fundamentais"><span>Princípios Fundamentais</span></a></h3><ol><li><strong>Recursos</strong>: Tudo na REST é considerado um recurso, identificado por uma URL única.</li><li><strong>Métodos HTTP</strong>: Utiliza métodos como GET, POST, PUT e DELETE para operações CRUD (Create, Read, Update, Delete).</li><li><strong>Stateless</strong>: Cada requisição é independente, sem armazenamento de estado no servidor.</li><li><strong>Cacheabilidade</strong>: Respostas podem ser armazenadas em cache para melhorar a eficiência.</li><li><strong>Interface Uniforme</strong>: Simplifica a arquitetura, permitindo que diferentes sistemas interajam de maneira consistente.</li></ol><h3 id="onde-utilizar" tabindex="-1"><a class="header-anchor" href="#onde-utilizar"><span>Onde utilizar</span></a></h3><p>A API REST é essencial em diversas situações, especialmente quando:</p><ol><li><strong>Integração entre Sistemas</strong>: Facilita a comunicação entre diferentes aplicações, como um aplicativo móvel e um servidor backend.</li><li><strong>Escalabilidade</strong>: Ideal para sistemas que precisam crescer e atender a um grande número de requisições simultâneas.</li><li><strong>Desenvolvimento Web</strong>: Amplamente usada em aplicações web modernas devido à sua simplicidade e compatibilidade com HTTP.</li><li><strong>Microserviços</strong>: Permite que diferentes serviços de uma arquitetura de microserviços se comuniquem de forma eficiente.</li></ol><h2 id="surgimento-do-json" tabindex="-1"><a class="header-anchor" href="#surgimento-do-json"><span>Surgimento do JSON**</span></a></h2><p>JSON (JavaScript Object Notation) surgiu no início dos anos 2000 como uma alternativa leve e fácil de usar para a troca de dados entre um servidor e um cliente. Criado por Douglas Crockford, JSON foi projetado para ser uma forma simples de representar estruturas de dados complexas de maneira legível tanto para humanos quanto para máquinas. Sua sintaxe é baseada em um subconjunto da linguagem de programação JavaScript, o que facilita sua adoção em ambientes web.</p><h3 id="onde-utilizar-1" tabindex="-1"><a class="header-anchor" href="#onde-utilizar-1"><span>Onde utilizar</span></a></h3><ol><li><p><strong>Comunicação Cliente-Servidor</strong>: JSON é amplamente utilizado em APIs RESTful para a troca de dados entre servidores e clientes. Sua estrutura simples e legível facilita a serialização e desserialização de dados.</p></li><li><p><strong>Armazenamento de Dados</strong>: JSON é frequentemente usado para armazenar configurações e dados em arquivos devido à sua simplicidade e facilidade de leitura. Muitos bancos de dados NoSQL, como MongoDB, utilizam JSON para armazenar documentos.</p></li><li><p><strong>Configuração de Aplicações</strong>: Arquivos de configuração em JSON são comuns em diversas aplicações, permitindo que desenvolvedores definam parâmetros de forma clara e organizada.</p></li><li><p><strong>Interoperabilidade</strong>: JSON é uma escolha popular para a interoperabilidade entre diferentes sistemas e linguagens de programação, devido à sua natureza independente de linguagem.</p></li></ol><p><strong>Exemplo de Estrutura JSON</strong></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;nome&quot;</span><span class="token operator">:</span> <span class="token string">&quot;João&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;idade&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token property">&quot;profissão&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Desenvolvedor&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;habilidades&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SQL&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="construindo-o-html-no-navegador" tabindex="-1"><a class="header-anchor" href="#construindo-o-html-no-navegador"><span>Construindo o HTML no navegador</span></a></h2><p>Disparando uma requisição via JavaScript para um servidor, ele irá responder com um JSON contendo os dados necessários. A partir dessa resposta, podemos dinamicamente construir o HTML no navegador. Aqui está um exemplo de como isso pode ser feito:</p><p><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><ol><li><p><strong>Fazendo a Requisição</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.exemplo.com/dados&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token function">construirHTML</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Erro:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Função para Construir o HTML</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">construirHTML</span><span class="token punctuation">(</span><span class="token parameter">dados</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dados<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;item&#39;</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>titulo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;
      &lt;p&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>descricao<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Estrutura HTML Inicial</strong>:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pt-BR<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Exemplo de Construção de HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.item</span> <span class="token punctuation">{</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>Neste exemplo, a função <code>fetch</code> é usada para fazer uma requisição para um servidor. Quando a resposta JSON é recebida e convertida para Objetos, a função <code>construirHTML</code> é chamada para criar e inserir elementos HTML no DOM com base nos dados recebidos.</p><h3 id="atividade-pratica" tabindex="-1"><a class="header-anchor" href="#atividade-pratica"><span>Atividade Prática</span></a></h3><ul><li><strong>Objetivo</strong>: Fazer uma requisição a uma API pública e exibir os dados no HTML. <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></li><li><strong>Passos</strong>: <ol><li>Escolher uma API pública (ex: https://jsonplaceholder.typicode.com/posts).</li><li>Fazer a requisição usando <code>fetch</code>.</li><li>Manipular os dados JSON recebidos.</li><li>Criar elementos HTML dinamicamente para exibir os dados.</li></ol></li></ul>`,21)),n("p",null,[n("a",u,[a[0]||(a[0]=s("Entrega")),e(t)])]),a[11]||(a[11]=n("hr",{class:"footnotes-sep"},null,-1)),n("section",d,[n("ol",m,[n("li",k,[n("p",null,[a[2]||(a[2]=s("Roy Thomas Fielding, Representational State Transfer (REST), 2000 ")),n("a",g,[a[1]||(a[1]=s("https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm")),e(t)]),a[3]||(a[3]=s()),a[4]||(a[4]=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1))])]),n("li",v,[n("p",null,[a[6]||(a[6]=s("MDN Web Docs Fetch API ")),n("a",f,[a[5]||(a[5]=s("https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API")),e(t)]),a[7]||(a[7]=s()),a[8]||(a[8]=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1))])]),a[9]||(a[9]=n("li",{id:"footnote3",class:"footnote-item"},[n("p",null,[s("JSONPlaceholder [https://jsonplaceholder.typicode.com/] (https://jsonplaceholder.typicode.com/) "),n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎")])],-1))])])])}const q=o(c,[["render",h],["__file","10_JSON_REST.html.vue"]]),y=JSON.parse('{"path":"/posts/10_JSON_REST.html","title":"REST e JSON","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-08-26T23:20:00.000Z","category":["aula"],"tag":["javascript"],"order":10,"gitInclude":["../../src/bib/bib.md"],"description":"REST e JSON Surgimento da API REST A API REST (Representational State Transfer) foi introduzida por Roy Fielding em sua tese de doutorado em 2000 [1]. Fielding, um dos principai...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-pweb.github.io/blog-material-aula/blog-material-aula/posts/10_JSON_REST.html"}],["meta",{"property":"og:site_name","content":"20241 PWEB Blog das Aulas"}],["meta",{"property":"og:title","content":"REST e JSON"}],["meta",{"property":"og:description","content":"REST e JSON Surgimento da API REST A API REST (Representational State Transfer) foi introduzida por Roy Fielding em sua tese de doutorado em 2000 [1]. Fielding, um dos principai..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-02T23:22:36.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2024-08-26T23:20:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-02T23:22:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"REST e JSON\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-26T23:20:00.000Z\\",\\"dateModified\\":\\"2024-09-02T23:22:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Surgimento da API REST","slug":"surgimento-da-api-rest","link":"#surgimento-da-api-rest","children":[{"level":3,"title":"Princípios Fundamentais","slug":"principios-fundamentais","link":"#principios-fundamentais","children":[]},{"level":3,"title":"Onde utilizar","slug":"onde-utilizar","link":"#onde-utilizar","children":[]}]},{"level":2,"title":"Surgimento do JSON**","slug":"surgimento-do-json","link":"#surgimento-do-json","children":[{"level":3,"title":"Onde utilizar","slug":"onde-utilizar-1","link":"#onde-utilizar-1","children":[]}]},{"level":2,"title":"Construindo o HTML no navegador","slug":"construindo-o-html-no-navegador","link":"#construindo-o-html-no-navegador","children":[{"level":3,"title":"Atividade Prática","slug":"atividade-pratica","link":"#atividade-pratica","children":[]}]}],"git":{"createdTime":1711414783000,"updatedTime":1725319356000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":2},{"name":"Leandro Souza","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":2.32,"words":695},"filePathRelative":"posts/10_JSON_REST.md","localizedDate":"26 de agosto de 2024","autoDesc":true}');export{q as comp,y as data};
