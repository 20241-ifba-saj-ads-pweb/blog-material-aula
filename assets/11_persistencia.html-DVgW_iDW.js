import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,a as t}from"./app-DqO0Mwt2.js";const o={};function p(c,a){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="persistencia-de-dados" tabindex="-1"><a class="header-anchor" href="#persistencia-de-dados"><span>Persistência de Dados</span></a></h1><p><strong>Persistência de dados</strong> refere-se à capacidade de uma aplicação manter dados de forma duradoura, de modo que esses dados permaneçam disponíveis mesmo após o término de uma sessão ou a interrupção do sistema. Em outras palavras, persistir dados significa armazená-los em um meio que não se perde quando o sistema é desligado, como em um banco de dados, arquivo, ou outro tipo de armazenamento permanente.</p><ul><li><strong>Dados Voláteis vs. Dados Persistentes</strong>: <ul><li><em>Dados voláteis</em>: São armazenados temporariamente, como em variáveis de uma aplicação ou na memória RAM. Eles desaparecem quando o sistema é desligado ou a aplicação é reiniciada.</li><li><em>Dados persistentes</em>: São mantidos em armazenamento duradouro, como bancos de dados ou arquivos no disco. Mesmo que o sistema seja desligado, esses dados ainda estarão disponíveis na próxima vez que a aplicação for executada.</li></ul></li></ul><h2 id="persistencia-de-dados-em-sistemas-web" tabindex="-1"><a class="header-anchor" href="#persistencia-de-dados-em-sistemas-web"><span>Persistência de Dados em Sistemas Web</span></a></h2><p>Em sistemas web, a persistência de dados é crucial por várias razões:</p><ul><li><p><strong>Manutenção do Estado entre Sessões</strong>:</p><ul><li>Aplicações web geralmente são baseadas em requisições HTTP, que são <em>stateless</em> por natureza. Isso significa que, por padrão, cada requisição é independente das outras. Sem persistência de dados, seria <em>impossível(*)</em> lembrar informações de uma requisição para outra.</li><li>Exemplo: Em um site de e-commerce, o carrinho de compras precisa persistir entre diferentes acessos ao site. Sem persistência, os itens do carrinho seriam perdidos cada vez que o usuário saísse da página.</li></ul></li><li><p><strong>Armazenamento de Informações do Usuário</strong>:</p><ul><li>Aplicações web muitas vezes precisam armazenar informações sobre os usuários, como perfis, preferências, histórico de atividades, e assim por diante.</li><li>Exemplo: Uma rede social precisa salvar os perfis dos usuários, suas postagens, comentários e outras interações.</li></ul></li><li><p><strong>Funcionalidade e Usabilidade</strong>:</p><ul><li>A persistência de dados permite que os usuários tenham uma experiência contínua e personalizada. Eles podem começar uma atividade em um dispositivo e continuar em outro, ou retomar uma tarefa de onde pararam, dias ou semanas depois.</li><li>Exemplo: Uma aplicação de gerenciamento de tarefas que lembra onde você parou, quais tarefas já completou, e quais ainda estão pendentes, independentemente de quantas vezes você acessar o sistema.</li></ul></li><li><p><strong>Integridade e Confiabilidade</strong>:</p><ul><li>A persistência de dados também é essencial para garantir que informações críticas não sejam perdidas. Isso é especialmente importante em sistemas que lidam com transações financeiras, registros médicos, ou qualquer outro tipo de dado sensível.</li><li>Exemplo: Em um banco, as transações precisam ser registradas com precisão para que o saldo da conta do cliente seja sempre atualizado corretamente.</li></ul></li></ul><h2 id="jdbc" tabindex="-1"><a class="header-anchor" href="#jdbc"><span>JDBC</span></a></h2><p><strong>JDBC (Java Database Connectivity)</strong> é uma API (Application Programming Interface) da linguagem Java que permite que aplicações Java se comuniquem com diferentes tipos de bancos de dados relacionais. Ele fornece um conjunto de interfaces e classes para conectar-se a um banco de dados, executar consultas e comandos SQL, e processar os resultados.</p><h3 id="principais-componentes-do-jdbc" tabindex="-1"><a class="header-anchor" href="#principais-componentes-do-jdbc"><span>Principais Componentes do JDBC</span></a></h3><h4 id="driver-manager" tabindex="-1"><a class="header-anchor" href="#driver-manager"><span>Driver Manager</span></a></h4><p>É uma classe que gerencia um conjunto de drivers de banco de dados. Um driver JDBC é um componente que atua como uma ponte entre a aplicação Java e o banco de dados. O <code>DriverManager</code> é responsável por carregar os drivers apropriados e estabelecer uma conexão com o banco de dados.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>No exemplo acima, o método <code>getConnection</code> é usado para estabelecer uma conexão com o banco de dados usando a URL do banco, o nome de usuário e a senha.</p><h4 id="connection" tabindex="-1"><a class="header-anchor" href="#connection"><span>Connection</span></a></h4><p>Representa uma conexão ativa com um banco de dados. Através do objeto <code>Connection</code>, a aplicação pode interagir com o banco de dados, executando comandos SQL e gerenciando transações.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Importante</p><p>As conexões devem ser fechadas após o uso para liberar os recursos.</p></div><h4 id="statement" tabindex="-1"><a class="header-anchor" href="#statement"><span>Statement</span></a></h4><p>Uma <code>Statement</code> é usada para executar comandos SQL estáticos, como <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code> ou <code>DELETE</code>. Existem três tipos principais de objetos <code>Statement</code> no JDBC:</p><ul><li><strong>Statement</strong>: Para executar consultas simples.</li><li><strong>PreparedStatement</strong>: Para consultas parametrizadas, que são mais seguras e eficientes.</li><li><strong>CallableStatement</strong>: Para executar stored procedures (procedimentos armazenados) em um banco de dados.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>No exemplo acima, um objeto <code>Statement</code> é criado para executar uma consulta SQL que recupera todos os registros da tabela <code>users</code>.</p><h4 id="resultset" tabindex="-1"><a class="header-anchor" href="#resultset"><span>ResultSet</span></a></h4><p>Um <code>ResultSet</code> contém os dados retornados por uma consulta SQL. Ele atua como um cursor que aponta para os dados retornados e permite iterar sobre as linhas do resultado.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ID: &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;, Name: &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, Email: &quot;</span> <span class="token operator">+</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neste exemplo, o <code>ResultSet</code> é usado para iterar sobre os resultados da consulta e processar cada linha.</p><h4 id="preparedstatement" tabindex="-1"><a class="header-anchor" href="#preparedstatement"><span>PreparedStatement</span></a></h4><p>Uma <code>PreparedStatement</code> é uma versão pré-compilada de um <code>Statement</code>. Ela permite que você defina parâmetros nas consultas SQL, o que não só aumenta a segurança (prevenindo ataques de SQL injection), mas também melhora o desempenho em operações repetitivas.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> sqlInsert <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO users (name, email) VALUES (?, ?)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sqlInsert<span class="token punctuation">)</span><span class="token punctuation">;</span>
pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;alice@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neste exemplo, o <code>PreparedStatement</code> é usado para inserir um novo registro na tabela <code>users</code>, com os valores dos parâmetros sendo definidos dinamicamente.</p><h4 id="callablestatement" tabindex="-1"><a class="header-anchor" href="#callablestatement"><span>CallableStatement</span></a></h4><p>Usado para chamar stored procedures no banco de dados, que são procedimentos armazenados que podem realizar operações complexas.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CallableStatement</span> cstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token string">&quot;{call procedure_name(?, ?)}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;param1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cstmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nesse exemplo, uma <code>CallableStatement</code> é usada para chamar uma stored procedure no banco de dados.</p><h4 id="beneficios-do-jdbc" tabindex="-1"><a class="header-anchor" href="#beneficios-do-jdbc"><span>Benefícios do JDBC</span></a></h4><ul><li><p><strong>Portabilidade</strong>: JDBC permite que sua aplicação seja independente do banco de dados. Desde que você use a API JDBC, você pode mudar o banco de dados subjacente (como MySQL, Oracle, H2, etc.) com poucas ou nenhuma alteração no código.</p></li><li><p><strong>Facilidade de Uso</strong>: JDBC oferece uma interface simples para executar comandos SQL, gerenciar transações e processar resultados.</p></li><li><p><strong>Flexibilidade</strong>: JDBC suporta a execução de SQL dinâmico, permitindo que você construa consultas em tempo de execução com base nas necessidades da aplicação.</p></li><li><p><strong>Segurança</strong>: O uso de <code>PreparedStatement</code> previne SQL injection, uma vulnerabilidade comum em sistemas que aceitam entrada de dados do usuário.</p></li></ul><h4 id="como-o-jdbc-funciona" tabindex="-1"><a class="header-anchor" href="#como-o-jdbc-funciona"><span>Como o JDBC Funciona</span></a></h4><ol><li><p><strong>Carregamento do Driver</strong>(JDBC versões mais antigas):</p><ul><li>Antes de conectar-se a um banco de dados, é necessário carregar o driver JDBC específico do banco. Este driver é responsável por traduzir as chamadas JDBC para comandos específicos do banco de dados.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;org.h2.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Carrega o driver do H2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Conexão ao Banco de Dados</strong>:</p><ul><li>Usando o <code>DriverManager</code>, a aplicação estabelece uma conexão com o banco de dados.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:h2:~/test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Execução de Comandos SQL</strong>:</p><ul><li>Com a conexão estabelecida, a aplicação pode criar um <code>Statement</code> ou <code>PreparedStatement</code> para executar comandos SQL.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Processamento dos Resultados</strong>:</p><ul><li>O <code>ResultSet</code> contém os resultados da consulta, que podem ser processados linha por linha.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Fechamento dos Recursos</strong>:</p><ul><li>É crucial fechar os recursos (<code>Connection</code>, <code>Statement</code>, <code>ResultSet</code>) após o uso para evitar vazamentos de recursos.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,38)]))}const d=s(o,[["render",p],["__file","11_persistencia.html.vue"]]),l=JSON.parse('{"path":"/posts/11_persistencia.html","title":"Persistência de Dados","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-09-02T23:20:00.000Z","category":["aula"],"tag":["persistencia"],"order":11,"description":"Persistência de Dados Persistência de dados refere-se à capacidade de uma aplicação manter dados de forma duradoura, de modo que esses dados permaneçam disponíveis mesmo após o ...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-pweb.github.io/blog-material-aula/blog-material-aula/posts/11_persistencia.html"}],["meta",{"property":"og:site_name","content":"20241 PWEB Blog das Aulas"}],["meta",{"property":"og:title","content":"Persistência de Dados"}],["meta",{"property":"og:description","content":"Persistência de Dados Persistência de dados refere-se à capacidade de uma aplicação manter dados de forma duradoura, de modo que esses dados permaneçam disponíveis mesmo após o ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-02T23:22:36.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"persistencia"}],["meta",{"property":"article:published_time","content":"2024-09-02T23:20:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-02T23:22:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Persistência de Dados\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-02T23:20:00.000Z\\",\\"dateModified\\":\\"2024-09-02T23:22:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Persistência de Dados em Sistemas Web","slug":"persistencia-de-dados-em-sistemas-web","link":"#persistencia-de-dados-em-sistemas-web","children":[]},{"level":2,"title":"JDBC","slug":"jdbc","link":"#jdbc","children":[{"level":3,"title":"Principais Componentes do JDBC","slug":"principais-componentes-do-jdbc","link":"#principais-componentes-do-jdbc","children":[]}]}],"git":{"createdTime":1725319356000,"updatedTime":1725319356000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":3.87,"words":1161},"filePathRelative":"posts/11_persistencia.md","localizedDate":"2 de setembro de 2024","autoDesc":true}');export{d as comp,l as data};
