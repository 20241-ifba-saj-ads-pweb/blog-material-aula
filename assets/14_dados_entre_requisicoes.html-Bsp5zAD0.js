import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,e as l,w as e,a as u,r,o as d,d as s}from"./app-CtFAj5SQ.js";const k={};function m(v,a){const p=r("CodeTabs");return d(),i("div",null,[a[4]||(a[4]=n("h1",{id:"persistir-dados-entre-requisicoes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#persistir-dados-entre-requisicoes"},[n("span",null,"Persistir dados entre Requisições")])],-1)),a[5]||(a[5]=n("p",null,"Para persistir informações entre requisições de páginas, várias abordagens podem ser usadas, dependendo do escopo de persistência e da necessidade da aplicação.",-1)),a[6]||(a[6]=n("h2",{id:"cookies",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cookies"},[n("span",null,"Cookies")])],-1)),a[7]||(a[7]=n("p",null,"Cookies são pequenos arquivos de texto armazenados no lado do cliente (navegador). Eles são enviados pelo servidor e automaticamente incluídos em todas as requisições subsequentes para o mesmo domínio, permitindo que informações sejam mantidas entre requisições.",-1)),l(p,{id:"12",data:[{id:"Jakarta EE"},{id:"Spring"}],"tab-id":"java"},{title0:e(({value:t,isActive:o})=>a[0]||(a[0]=[s("Jakarta EE")])),title1:e(({value:t,isActive:o})=>a[1]||(a[1]=[s("Spring")])),tab0:e(({value:t,isActive:o})=>a[2]||(a[2]=[n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("jakarta"),n("span",{class:"token punctuation"},"."),s("servlet"),n("span",{class:"token punctuation"},"."),s("http"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Cookie")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("jakarta"),n("span",{class:"token punctuation"},"."),s("servlet"),n("span",{class:"token punctuation"},"."),s("http"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"HttpServlet")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("jakarta"),n("span",{class:"token punctuation"},"."),s("servlet"),n("span",{class:"token punctuation"},"."),s("http"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"HttpServletRequest")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("jakarta"),n("span",{class:"token punctuation"},"."),s("servlet"),n("span",{class:"token punctuation"},"."),s("http"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"HttpServletResponse")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CookieServlet"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"HttpServlet"),s(),n("span",{class:"token punctuation"},"{"),s(`
    
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"doGet"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpServletRequest"),s(" req"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpServletResponse"),s(" resp"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// Criar um cookie"),s(`
        `),n("span",{class:"token class-name"},"Cookie"),s(" cookie "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Cookie"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"username"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"user123"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        cookie`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setMaxAge"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"60"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"60"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"24"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// Duração de 1 dia"),s(`
        resp`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addCookie"),n("span",{class:"token punctuation"},"("),s("cookie"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        
        `),n("span",{class:"token comment"},"// Recuperar o cookie"),s(`
        `),n("span",{class:"token class-name"},"Cookie"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" cookies "),n("span",{class:"token operator"},"="),s(" req"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getCookies"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cookies "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Cookie"),s(" c "),n("span",{class:"token operator"},":"),s(" cookies"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"username"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token class-name"},"String"),s(" username "),n("span",{class:"token operator"},"="),s(" c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    resp`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getWriter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Welcome back, "'),s(),n("span",{class:"token operator"},"+"),s(" username"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[3]||(a[3]=[n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("org"),n("span",{class:"token punctuation"},"."),s("springframework"),n("span",{class:"token punctuation"},"."),s("stereotype"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Controller")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("org"),n("span",{class:"token punctuation"},"."),s("springframework"),n("span",{class:"token punctuation"},"."),s("web"),n("span",{class:"token punctuation"},"."),s("bind"),n("span",{class:"token punctuation"},"."),s("annotation"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"GetMapping")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("jakarta"),n("span",{class:"token punctuation"},"."),s("servlet"),n("span",{class:"token punctuation"},"."),s("http"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Cookie")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("jakarta"),n("span",{class:"token punctuation"},"."),s("servlet"),n("span",{class:"token punctuation"},"."),s("http"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"HttpServletResponse")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token annotation punctuation"},"@Controller"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CookieController"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@GetMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/create-cookie"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"createCookie"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpServletResponse"),s(" response"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// Criar um novo cookie"),s(`
        `),n("span",{class:"token class-name"},"Cookie"),s(" cookie "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Cookie"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"username"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"user123"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        
        `),n("span",{class:"token comment"},"// Definir o tempo de vida do cookie (em segundos) - por exemplo, 1 dia"),s(`
        cookie`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setMaxAge"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"60"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"60"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"24"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        
        `),n("span",{class:"token comment"},"// Adicionar o cookie na resposta"),s(`
        response`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addCookie"),n("span",{class:"token punctuation"},"("),s("cookie"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        
        `),n("span",{class:"token comment"},"// Redirecionar para uma página"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},'"cookieCreated"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[8]||(a[8]=u(`<ul><li><strong>Vantagens</strong>: Simples e direto, persistente entre fechamentos do navegador.</li><li><strong>Desvantagens</strong>: Limite de tamanho (geralmente 4KB), pode ser inseguro já que fica exposto ao cliente.</li></ul><h2 id="session-sessao-http" tabindex="-1"><a class="header-anchor" href="#session-sessao-http"><span>Session (Sessão HTTP)</span></a></h2><p>As <strong>sessões HTTP</strong> permitem que o servidor armazene informações específicas para cada cliente. A sessão é identificada por um identificador único (<strong>JSESSIONID</strong>), que é armazenado no navegador, e as informações da sessão ficam no servidor.</p><ul><li>Exemplo de uso com Jakarta EE (Servlet):</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Armazenar informação na sessão</span>
        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Recuperar a informação da sessão</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Vantagens</strong>: Armazenamento no servidor, seguro, mantém dados do usuário entre requisições.</li><li><strong>Desvantagens</strong>: Ocupa memória no servidor, expira após um tempo inativo (configurável).</li></ul><h2 id="application-context" tabindex="-1"><a class="header-anchor" href="#application-context"><span>Application Context</span></a></h2><p>O <strong>Application Scope</strong> é usado para armazenar informações que são compartilhadas entre todas as requisições e sessões de uma aplicação. Ele persiste até que o servidor seja reiniciado ou a aplicação seja redeployada.</p><ul><li>Exemplo com Jakarta EE (ServletContext):</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationScopeServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Armazenar dados no escopo da aplicação</span>
        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;globalMessage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Welcome to the application!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Recuperar dados</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;globalMessage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Vantagens</strong>: Compartilhado entre todos os usuários e sessões, útil para dados globais.</li><li><strong>Desvantagens</strong>: Todos os usuários veem as mesmas informações, pode causar problemas de concorrência se mal usado.</li></ul><h2 id="escopo-de-requisicao" tabindex="-1"><a class="header-anchor" href="#escopo-de-requisicao"><span>Escopo de Requisição</span></a></h2><p>O escopo de requisição é utilizado para armazenar informações que duram apenas uma requisição HTTP. Ele é adequado para dados temporários que não precisam ser persistidos além da requisição atual.</p><ul><li>Exemplo com Jakarta EE (Request Scope):</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestScopeServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Armazenar dado no escopo da requisição</span>
        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is a request-scoped message!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Recuperar dado do escopo da requisição</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Vantagens</strong>: Simples, não há risco de dados persistirem por mais tempo do que o necessário.</li><li><strong>Desvantagens</strong>: Dados são perdidos ao final da requisição.</li></ul><h2 id="flash-scope" tabindex="-1"><a class="header-anchor" href="#flash-scope"><span>Flash Scope</span></a></h2><p>O <strong>Flash Scope</strong> é comumente usado em frameworks MVC, como JSF ou Spring MVC, para persistir dados entre requisições de redirecionamento (por exemplo, de um formulário POST para uma página GET). Ele é útil quando você precisa passar informações após uma ação sem usar a URL diretamente.</p><ul><li><strong>Exemplo em JSF:</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>enterprise<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">RequestScoped</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Named</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Named</span>
<span class="token annotation punctuation">@RequestScoped</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlashBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FacesContext</span><span class="token punctuation">.</span><span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExternalContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Form successfully submitted!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;success?faces-redirect=true&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Redireciona para outra página</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Na página de destino, o valor <code>&quot;message&quot;</code> pode ser recuperado da variável de flash.</p><ul><li><strong>Vantagens</strong>: Persiste por uma requisição subsequente (útil para redirecionamentos).</li><li><strong>Desvantagens</strong>: Não persiste além de uma requisição.</li></ul><h2 id="banco-de-dados" tabindex="-1"><a class="header-anchor" href="#banco-de-dados"><span>Banco de Dados</span></a></h2><p>Para persistência de longo prazo e compartilhada entre sessões, o uso de um <strong>banco de dados</strong> é a solução mais comum. O banco de dados armazena as informações de forma persistente, independente da sessão ou da requisição.</p><ul><li><strong>Vantagens</strong>: Totalmente persistente, compartilhado entre todos os usuários.</li><li><strong>Desvantagens</strong>: Maior complexidade e necessidade de integração com um sistema de persistência (JPA, JDBC, etc.).</li></ul><h2 id="resumos-dos-escopo" tabindex="-1"><a class="header-anchor" href="#resumos-dos-escopo"><span>Resumos dos Escopo</span></a></h2><table><thead><tr><th>Escopo</th><th>Persistência</th><th>Compartilhado entre Sessões</th><th>Exemplo de Uso</th></tr></thead><tbody><tr><td><strong>Cookies</strong></td><td>Persistente</td><td>Não</td><td>Lembrar preferências do usuário</td></tr><tr><td><strong>Sessão</strong></td><td>Temporário</td><td>Não</td><td>Carrinho de compras</td></tr><tr><td><strong>Aplicação</strong></td><td>Persistente</td><td>Sim</td><td>Configurações globais</td></tr><tr><td><strong>Requisição</strong></td><td>Temporário</td><td>Não</td><td>Dados de uma requisição</td></tr><tr><td><strong>Flash</strong></td><td>Temporário</td><td>Não</td><td>Dados após redirecionamento</td></tr><tr><td><strong>Banco de Dados</strong></td><td>Persistente</td><td>Sim</td><td>Dados críticos e persistentes</td></tr></tbody></table><p>Essas técnicas são utilizadas de acordo com as necessidades da aplicação para armazenar e compartilhar informações entre requisições e usuários.</p><h2 id="usos-dos-escopos-com-cdi" tabindex="-1"><a class="header-anchor" href="#usos-dos-escopos-com-cdi"><span>Usos dos escopos com CDI</span></a></h2><p>A definição de escopos para componetes é gerenciada principalmente pelo CDI (Context and Dependency Injection). O CDI oferece vários escopos pré-definidos que podem ser usados para controlar o ciclo de vida dos objetos injetados na aplicação.</p><p>Quando desenvolvemos aplicações web com <strong>Spring MVC</strong> ou <strong>Jakarta EE</strong>, precisamos entender como os dados são armazenados e gerenciados em diferentes escopos durante o ciclo de vida de uma requisição. Diferentes escopos servem para diferentes propósitos, como o escopo de uma requisição HTTP, a sessão do usuário, ou mesmo o ciclo de vida global da aplicação.</p><h3 id="escopo-request-requisicao" tabindex="-1"><a class="header-anchor" href="#escopo-request-requisicao"><span>Escopo Request (Requisição)</span></a></h3><p>O escopo de requisição (<code>@RequestScope</code>) é usado para definir um componente que existe apenas durante uma única requisição HTTP. Ele é criado no início de uma requisição e destruído no final.</p><h4 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo"><span>Exemplo:</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestScope</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequestScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestScopedBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;Request Scoped Value&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Controlador Spring MVC:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RequestScopedBean</span> requestScopedBean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/request&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRequestScopedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> requestScopedBean<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cada vez que você acessa a URL <code>/request</code>, um novo componente <code>RequestScopedBean</code> é criado. Assim, o valor desse componente está limitado àquela requisição em particular.</p><h3 id="escopo-session-sessao" tabindex="-1"><a class="header-anchor" href="#escopo-session-sessao"><span>Escopo Session (Sessão)</span></a></h3><p>O escopo de sessão (<code>@SessionScope</code>) define um componente que é criado e associado à sessão do usuário. O componente permanece vivo enquanto a sessão do usuário durar.</p><h4 id="exemplo-1" tabindex="-1"><a class="header-anchor" href="#exemplo-1"><span>Exemplo:</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SessionScope</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@SessionScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionScopedBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Controlador Spring MVC:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SessionScopedBean</span> sessionScopedBean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/session&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSessionScopedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sessionScopedBean<span class="token punctuation">.</span><span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Session Scoped Counter: &quot;</span> <span class="token operator">+</span> sessionScopedBean<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O contador é mantido por toda a duração da sessão do usuário. Cada vez que o mesmo usuário acessa a URL <code>/session</code>, o contador é incrementado.</p><h3 id="escopo-application-singleton" tabindex="-1"><a class="header-anchor" href="#escopo-application-singleton"><span>Escopo Application (Singleton)</span></a></h3><p>O escopo de aplicação (<code>@Scope(&quot;singleton&quot;)</code>, que é o padrão no Spring) define um componente que é instanciado uma única vez e vive durante todo o ciclo de vida da aplicação. Todos os usuários e requisições compartilham a mesma instância desse componente.</p><h4 id="exemplo-2" tabindex="-1"><a class="header-anchor" href="#exemplo-2"><span>Exemplo:</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationScopedBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;Application Scoped Value&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Controlador Spring MVC:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationScopedBean</span> applicationScopedBean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/application&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getApplicationScopedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> applicationScopedBean<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/setApplication&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">setApplicationScopedValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        applicationScopedBean<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Updated value!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O valor do <code>ApplicationScopedBean</code> é compartilhado entre todas as requisições e usuários. Quando um usuário altera o valor, todos os usuários passam a visualizar o novo valor.</p><h3 id="flash-scope-1" tabindex="-1"><a class="header-anchor" href="#flash-scope-1"><span>Flash Scope</span></a></h3><p>Flash Scope é usado para persistir dados entre requisições redirecionadas, comum em navegações de formulário (padrão POST-REDIRECT-GET).</p><p>No Spring MVC, o <code>FlashAttributes</code> é usado para armazenar dados temporários no Flash Scope durante um redirecionamento (geralmente via <code>RedirectAttributes</code>).</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">RedirectAttributes</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlashController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/submitForm&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> redirectAttributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Armazenar dados no Flash Scope</span>
        redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Form submitted successfully!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Redirecionar para a página de sucesso</span>
        <span class="token keyword">return</span> <span class="token string">&quot;redirect:/success&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/success&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">successPage</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// O FlashAttribute &quot;message&quot; estará disponível aqui</span>
        <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// Mapeia para a página success.html (ou outro view resolver)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>form.html</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/submitForm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Enter your name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>success.html</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Success Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${message}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Default message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h3><p>WebSocket permite que o cliente e o servidor troquem dados de forma eficiente e em tempo real. Diferente do HTTP, onde cada requisição/Resposta é independente e isolada, o WebSocket estabelece uma conexão persistente que permite comunicação bidirecional contínua.</p>`,62))])}const q=c(k,[["render",m],["__file","14_dados_entre_requisicoes.html.vue"]]),h=JSON.parse('{"path":"/posts/14_dados_entre_requisicoes.html","title":"Persistir dados entre Requisições","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-09-09T23:40:00.000Z","category":["aula"],"tag":["escopo"],"order":14,"description":"Persistir dados entre Requisições Para persistir informações entre requisições de páginas, várias abordagens podem ser usadas, dependendo do escopo de persistência e da necessid...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-pweb.github.io/blog-material-aula/blog-material-aula/posts/14_dados_entre_requisicoes.html"}],["meta",{"property":"og:site_name","content":"20241 PWEB Blog das Aulas"}],["meta",{"property":"og:title","content":"Persistir dados entre Requisições"}],["meta",{"property":"og:description","content":"Persistir dados entre Requisições Para persistir informações entre requisições de páginas, várias abordagens podem ser usadas, dependendo do escopo de persistência e da necessid..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-09T23:27:16.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"escopo"}],["meta",{"property":"article:published_time","content":"2024-09-09T23:40:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T23:27:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Persistir dados entre Requisições\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-09T23:40:00.000Z\\",\\"dateModified\\":\\"2024-09-09T23:27:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Cookies","slug":"cookies","link":"#cookies","children":[]},{"level":2,"title":"Session (Sessão HTTP)","slug":"session-sessao-http","link":"#session-sessao-http","children":[]},{"level":2,"title":"Application Context","slug":"application-context","link":"#application-context","children":[]},{"level":2,"title":"Escopo de Requisição","slug":"escopo-de-requisicao","link":"#escopo-de-requisicao","children":[]},{"level":2,"title":"Flash Scope","slug":"flash-scope","link":"#flash-scope","children":[]},{"level":2,"title":"Banco de Dados","slug":"banco-de-dados","link":"#banco-de-dados","children":[]},{"level":2,"title":"Resumos dos Escopo","slug":"resumos-dos-escopo","link":"#resumos-dos-escopo","children":[]},{"level":2,"title":"Usos dos escopos com CDI","slug":"usos-dos-escopos-com-cdi","link":"#usos-dos-escopos-com-cdi","children":[{"level":3,"title":"Escopo Request (Requisição)","slug":"escopo-request-requisicao","link":"#escopo-request-requisicao","children":[]},{"level":3,"title":"Escopo Session (Sessão)","slug":"escopo-session-sessao","link":"#escopo-session-sessao","children":[]},{"level":3,"title":"Escopo Application (Singleton)","slug":"escopo-application-singleton","link":"#escopo-application-singleton","children":[]},{"level":3,"title":"Flash Scope","slug":"flash-scope-1","link":"#flash-scope-1","children":[]},{"level":3,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]}]}],"git":{"createdTime":1725924436000,"updatedTime":1725924436000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":4.96,"words":1488},"filePathRelative":"posts/14_dados_entre_requisicoes.md","localizedDate":"9 de setembro de 2024","autoDesc":true}');export{q as comp,h as data};
